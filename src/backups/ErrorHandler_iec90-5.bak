/************************************************************************/
/* SISCO SOFTWARE MODULE HEADER *****************************************/
/************************************************************************/
/*	(c) Copyright Systems Integration Specialists Company, Inc.,	*/
/*	2011-2011, All Rights Reserved					*/
/*									*/
/* MODULE NAME : udp_pub.c						*/
/* PRODUCT(S)  : MMS-EASE Lite						*/
/*									*/
/* MODULE DESCRIPTION :							*/
/*	UDP Publisher sample application				*/
/*									*/
/* GLOBAL FUNCTIONS DEFINED IN THIS MODULE :				*/
/*	NONE								*/
/*									*/
/* MODIFICATION LOG :							*/
/*  Date     Who			Comments			*/
/* --------  ---  ------   -------------------------------------------	*/
/* 08/31/11  JRB	   Fix CLTP encoding.				*/
/* 07/22/11  JRB	   Initial revision				*/
/************************************************************************/

/************************************************************************/
/* For debug version, use a static pointer to avoid duplication of 	*/
/* __FILE__ strings.							*/
/************************************************************************/
#include "iec_glbtypes.h"
#include "iec_sysincs.h"
#include "iec_90_5.h"



typedef struct error_Xlat
{
  int ErrorCode;
  char *XlatString;
} ERROR_XLAT;

static ERROR_XLAT translationTable[] = {
   { SUCCESS_IEC905,"Succes or OK result"},
   { FAILURE_IEC905,"Failure of NOK"},
   { UNABLE_TO_INTIALIZE_IP_INTERFACE, "Initialization of IP Failed"},
   { IP_PORT_INCORRECT_IEC905, "A IPPort of zero(0) was specified, must be a non-zero value"},
   { UNABLE_TO_OPEN_UDP_SOCKET_IEC905, "Unable to open the specified UDP Socket"},   	
   { UDP_RX_BIND_FAILED_IEC905, "Unable to bind to the IEC 90-5 receive socket (102 is the default)"},
   { ETHERNET_INTERFACE_NOT_FOUND , "The specified Ethernet Interface is not found/installed"},
   { ETHERNET_INTERFACE_OPEN_FAILED	, "The Etherenet interface exists, but could not be opened. Check priviledges"},
   { UNABLE_TO_CONVERT_IP_ADDRESS , "The specified IP Address could not be used.  It must be a V4 dotted decimal address currently."},
   { INVALID_IGMP_GROUP_ENROLL_PARAMETERS_IEC905 ," A non-supported IP Address or NULL parameters were passed"};
   { DUPLICATE_PAYLOAD_DETECTED_IEC905	 , "Security Payload already exists"},
   { IGMPV3_GROUP_MEMBERSHIP_ENROLL_FAILED_IEC905, "IGMPv3 subscription failed - check source address and/or that subscription address is a multicast address"},
   { IGMPV2_GROUP_MEMBERSHIP_ENROLL_FAILED_IEC905, " IGMPv3 subscription failed - check that the subscription address is a multicast address"},
   { INVALID_IGMP_GROUP_UNSUB_PARAMETER_IEC905, "A invalid parameter was detected in the IGMP unsubscribe function"},
   { INVALID_IGMP_GROUP_UNSUBV2_FAILURE_IEC905, "The un-subscribe for IGMPv2 failed"},
   { INVALID_IGMP_GROUP_UNSUBV3_FAILURE_IEC905, "The un-subscribe for IGMPv3 failed"},
   { TC_REGISTRATION_ERROR, "(Windows Specific): Could not register with the Traffic Control API.  It is not available on WindowsXP. Also, make sure that the QOS packet scheduler is installed and enabled for Windows"},
   { TC_OPEN_FAILED_CHK_ADMIN_PRIV , "(Windows Specific): Could not open Traffic Control API. API is not supported in WindowsXP or earlier.  Check that the application has administrative priviledges"},
   { TC_INTERFACE_LISTING_FALIED , "(Windows Specific): Could not obtain list of interfaces that support Traffic Control"},	              
   { INTERFACE_DIFFSERV_FAILED , "(Windows Specific): Could not use interface with differentiate services"},
   { TC_FLOWADD_FAILED , "(Windows Specific): Could not create the requested traffic control flow object"},
   { UNABLE_TO_ADD_TCFILTER	, "Could not create the requested transmit QOS"},
   { UNABLE_TO_DELETE_TC_FLOW	, "(Windows Specific): Could not delete the requested traffic flow object, probably in use by another QOS Filter"},

   	
   			       	
};


#if 0
		  				

		  		
    
	      	
	    
		      	
	    
	    
    
	    

 	  

     	  

  
   
  
    
     
		      
		//must have administrative priviledges to access the Traffic Control API
	 
	 
 
	     
		 
 

{ CRYPTO_API_ERROR_OFFSET		 	  
{ CRYPTO_PROVIDER_OPEN_ERROR		  
{ CRYPTO_RND_NUM_GEN_ERROR		  

#endif

#define MAX_ALLOWED_LAST_ERRORS 10
static ERROR_TRACKING LastErrors[MAX_ALLOWED_LAST_ERRORS+1];


//function just for debug breakpoint setting  
int IEC905_ErrorHandler (int errorCode, char * fileName, unsigned long lineNumber)
{
int i;

//move the array of information
  for(i=0; i<MAX_ALLOWED_LAST_ERRORS;++i)
	{
		memcpy(&LastErrors[i+1], &LastErrors[i], sizeof(ERROR_TRACKING));
	}
  LastErrors[0].errorCode = errorCode;
  LastErrors[0].fileName = fileName;
  LastErrors[0].lineNumber = lineNumber;
  LastErrors[0].timeOfError = time(NULL);
  LastErrors[0].inUse = TRUE;

  return(errorCode);
}


//Function returns the last error code
ERROR_TRACKING *IEC905_GetLastError()
{ 
  return(&LastErrors[0]);
}
  
char *IEC905_XlatErrorCode(int errorCode)
{
}